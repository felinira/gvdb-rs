name: Cargo Build & Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust:
          - "1.75" # MSRV
          - "stable"
          - "nightly"
        target:
          - "x86_64-unknown-linux-gnu"
          - "x86_64-pc-windows-gnu"
          - "x86_64-apple-darwin"
    steps:
      - uses: actions/checkout@v2
      - name: Install rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy
          target: ${{ matrix.target }}
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-test-dotcargo-${{ matrix.rust }}-{{ matrix.target }}-${{ hashFiles('**/Cargo.toml') }}

      - name: Install cargo-all-features
        uses: taiki-e/cache-cargo-install-action@v1
        with:
          tool: cargo-all-features
      - name: Build
        run: cargo build --verbose --all-features --target ${{ matrix.target }}
      - name: Clippy
        run: cargo clippy --verbose --all-features --target ${{ matrix.target }} -- -D warnings
      - name: Run tests
        run: cargo test-all-features --verbose --target ${{ matrix.target }}
      - name: Compile documentation
        run: cargo doc --verbose --no-deps --all-features --target ${{ matrix.target }}

  big_endian:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-s390x-cargo-${{ hashFiles('**/Cargo.toml') }}

      - uses: uraimo/run-on-arch-action@v2
        name: Build and test on s390x
        id: runcmd
        with:
          arch: s390x
          distro: alpine_latest
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            --volume "${HOME}/.cargo:/root/.cargo"
          install: |
            apk add cargo glib-dev --repository=https://dl-cdn.alpinelinux.org/alpine/edge/main
          run: |
            cargo test --all-features --verbose
            chmod -R a+r target
