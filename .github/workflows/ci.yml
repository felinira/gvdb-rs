name: Cargo Build & Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  read_msrv:
    name: Read MSRV
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust (stable)
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Read MSRV from workspace manifest
        id: read_msrv
        run: |
          cargo metadata --no-deps --format-version=1 \
          | jq -r 'first(.packages[]).rust_version' \
          | sed -E 's/^1\.([0-9]{2})$/1\.\1\.0/' \
          | xargs -0 printf "msrv=%s" \
          | tee /dev/stderr \
          >> "$GITHUB_OUTPUT"
    outputs:
      msrv: ${{ steps.read_msrv.outputs.msrv }}

  build_and_test:
    name: "Build and Test (${{ matrix.channel }}, ${{ matrix.target }})"
    runs-on: ubuntu-latest
    needs:
      - read_msrv
    strategy:
      fail-fast: false
      matrix:
        channel:
          - MSRV
          - stable
        target:
          - "x86_64-unknown-linux-gnu"
          - "x86_64-pc-windows-gnu"
          - "x86_64-apple-darwin"
        include:
          - target: "x86_64-unknown-linux-gnu"
            features: "--all-features"
          - target: "x86_64-pc-windows-gnu"
            features: "--no-default-features --features=mmap,gresource"
          - target: "x86_64-apple-darwin"
            features: "--no-default-features --features=mmap,gresource"
          - channel: MSRV
            rust: ${{ needs.read_msrv.outputs.msrv }}
          - channel: stable
            rust: stable
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libglib2.0-dev

      - name: Install rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy
          targets: ${{ matrix.target }}
      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-test-dotcargo-${{ matrix.rust }}-{{ matrix.target }}-${{ hashFiles('**/Cargo.toml') }}

      - name: Install cargo-all-features
        if: ${{ matrix.x86_64-unknown-linux-gnu }} == "x86_64-unknown-linux-gnu"
        uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: cargo-all-features
      - name: Build
        run: cargo build --verbose ${{ matrix.features }} --target ${{ matrix.target }}
      - name: Clippy
        if: ${{ matrix.rust != 'stable' }}
        run: cargo clippy --verbose ${{ matrix.features }} --target ${{ matrix.target }} -- -D warnings
      - name: Clippy Tests
        if: ${{ matrix.rust != 'stable' && matrix.target == 'x86_64-unknown-linux-gnu' }}
        run: cargo clippy --tests --verbose ${{ matrix.features }} --target ${{ matrix.target }} -- -D warnings
      - name: Run tests
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' }}
        run: cargo test-all-features --verbose --target ${{ matrix.target }}
      - name: Compile documentation
        run: cargo doc --verbose --no-deps ${{ matrix.features }} --target ${{ matrix.target }}

  big_endian:
    name: Big Endian (s390x)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-s390x-cargo-${{ hashFiles('**/Cargo.toml') }}

      - uses: uraimo/run-on-arch-action@v3
        name: Build and test on s390x
        id: runcmd
        with:
          arch: s390x
          distro: ubuntu_devel
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            --volume "${HOME}/.cargo:/root/.cargo"
          install: |
            apt-get update && apt-get install -y libglib2.0-dev rustup build-essential
          run: |
            rustup install stable
            cargo test --all-features --verbose
            chmod -R a+r target
